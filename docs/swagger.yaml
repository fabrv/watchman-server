basePath: /api/v1
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.ProjectPayload:
    properties:
      description:
        maxLength: 100
        minLength: 3
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - description
    - name
    type: object
  models.ProjectResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.RolePayload:
    properties:
      description:
        maxLength: 100
        minLength: 3
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - description
    - name
    type: object
  models.RoleResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.TeamPayload:
    properties:
      description:
        maxLength: 100
        minLength: 3
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - description
    - name
    type: object
  models.TeamResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.UserPayload:
    properties:
      email:
        maxLength: 100
        minLength: 3
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 3
        type: string
      role_id:
        type: integer
    required:
    - email
    - name
    - password
    - role_id
    type: object
info:
  contact: {}
paths:
  /projects:
    get:
      description: Get all projects
      parameters:
      - description: Limit
        in: query
        name: limit
        type: number
      - description: Offset
        in: query
        name: offset
        type: number
      - description: Name
        in: query
        name: name
        type: string
      - description: IDs
        in: query
        name: ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProjectResponse'
            type: array
      summary: Get All Projects
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create project
      parameters:
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
      summary: Create Project
      tags:
      - Projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Delete project
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Delete Project
      tags:
      - Projects
    get:
      description: Get project
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectResponse'
      summary: Get Project
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Update project
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Project
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Update Project
      tags:
      - Projects
  /roles:
    get:
      description: Get all roles
      parameters:
      - description: Limit
        in: query
        name: limit
        type: number
      - description: Offset
        in: query
        name: offset
        type: number
      - description: Name
        in: query
        name: name
        type: string
      - description: IDs
        in: query
        name: ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RoleResponse'
            type: array
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Add role
      parameters:
      - description: Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleResponse'
      summary: Add role
      tags:
      - Roles
  /roles/{id}:
    delete:
      description: Delete role
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete role
      tags:
      - Roles
    get:
      description: Get role
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleResponse'
      summary: Get role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update role
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.RolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Update role
      tags:
      - Roles
  /teams:
    get:
      description: Get all teams
      parameters:
      - description: Limit
        in: query
        name: limit
        type: number
      - description: Offset
        in: query
        name: offset
        type: number
      - description: Name
        in: query
        name: name
        type: string
      - description: IDs
        in: query
        name: ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TeamResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all teams
      tags:
      - Teams
    post:
      consumes:
      - application/json
      description: Create team
      parameters:
      - description: Team
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.TeamPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create team
      tags:
      - Teams
  /teams/{id}:
    delete:
      consumes:
      - application/json
      description: Delete team
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete team
      tags:
      - Teams
    get:
      description: Get team
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TeamResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get team
      tags:
      - Teams
    put:
      consumes:
      - application/json
      description: Update team
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      - description: Team
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.TeamPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update team
      tags:
      - Teams
  /users:
    get:
      description: Get all users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: number
      - description: Offset
        in: query
        name: offset
        type: number
      - description: Name
        in: query
        name: name
        type: string
      - description: IDs
        in: query
        name: ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserPayload'
            type: array
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Delete user
      tags:
      - Users
    get:
      description: Get user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserPayload'
      summary: Get user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Update user
      tags:
      - Users
swagger: "2.0"
